package com.shoppingcart.app.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shoppingcart.app.Entity.Product;
import com.shoppingcart.app.service.ProductService;

@RestController
@RequestMapping("/products")
public class ProductController {
	
	@Autowired
	private ProductService pService;
	
	
	//Adding a product into database
	@PostMapping("/")
	public ResponseEntity<Object> addUser(@RequestBody Product product){
		Product data=pService.addProduct(product);
		
		if(data!=null) {
			return new ResponseEntity<Object>(product,HttpStatus.CREATED);
		}
		else
			return new ResponseEntity<Object>(null,HttpStatus.INTERNAL_SERVER_ERROR);

}   
	
	//Getting List of products from the database
	@GetMapping("/")
	public List<Product> getAllProducts()
	{
		return pService.getAllProducts();
	}
	
	//Find By Id
	
	@GetMapping("/{id}")
	public ResponseEntity<Object> getProductById(@PathVariable int id){
		Product object=pService.getUserById(id);
		if(object!=null)
			return new ResponseEntity<Object>(object,HttpStatus.FOUND);
		else
			return new ResponseEntity<Object>("No User available with this ID",HttpStatus.NOT_FOUND);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Object> updateProduct(@PathVariable Long id,@RequestBody Product product)
	{
		Product object= pService.updateProduct(id, product);
		if(object!=null) {
			return new ResponseEntity<Object>(object,HttpStatus.OK);
		}
		else
			return new ResponseEntity<Object>("No user available to Update",HttpStatus.NOT_FOUND);
	}
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteUser(@PathVariable Long id){
		
		if(pService.deleteUser(id))
			return new ResponseEntity<String>("User Deleted ",HttpStatus.OK);
		else
			return new ResponseEntity<String>("No user found",HttpStatus.NOT_FOUND);
	}
	
	
	
}
